#!/usr/bin/env node

/*******************************************************************************
 * Copyright (c) 2014, 2016 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials are made 
 * available under the terms of the Eclipse Public License v1.0 
 * (http://www.eclipse.org/legal/epl-v10.html), and the Eclipse Distribution 
 * License v1.0 (http://www.eclipse.org/org/documents/edl-v10.html). 
 * 
 * Contributors: IBM Corporation - initial API and implementation
 ******************************************************************************/

/*eslint-env node */
var mdProcessor = require("../lib/mdProcessor");
var logger = require("./logger");

var ARG_SOURCEDIR = "--sourceDir";
var ARG_DESTDIR = "--destDir";
var SWITCH_OVERWRITE = "-overwrite";
var SWITCH_ATTRIBUTES = "-disableAttributes";
var SWITCH_PDF = "-disablePDF";
var SWITCH_TOC = "-disableTOC";
var SWITCH_VERBOSE = "-verbose";
var SWITCH_DEBUG = "-debug";
var OPTION_PDFOPTIONSFILE = "--pdfOptionsFile";
var OPTION_HEADERFILE = "--headerFile";
var OPTION_FOOTERFILE = "--footerFile";
var OPTION_CONREFFILE = "--conrefFile";

var sourceDir, destDir;
var overwrite, disableAttributes, disableTOC, disablePDF, verbose, debug;
var headerFile, footerFile, pdfOptionsFile, conrefFile;

var switchCounter = 0;
process.argv.forEach(function(arg) {
	switchCounter++;
	if (arg.indexOf(ARG_SOURCEDIR) === 0 && arg.indexOf("=") !== -1) {
		sourceDir = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(ARG_DESTDIR) === 0 && arg.indexOf("=") !== -1) {
		destDir = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(SWITCH_OVERWRITE) === 0) {
		overwrite = true;
	} else if (arg.indexOf(SWITCH_ATTRIBUTES) === 0) {
		disableAttributes = true;
	} else if (arg.indexOf(SWITCH_TOC) === 0) {
		disableTOC = true;
	} else if (arg.indexOf(SWITCH_PDF) === 0) {
		disablePDF = true;
	} else if (arg.indexOf(SWITCH_VERBOSE) === 0) {
		verbose = true;
	} else if (arg.indexOf(SWITCH_DEBUG) === 0) {
		debug = true;
	} else if (arg.indexOf(OPTION_PDFOPTIONSFILE) === 0 && arg.indexOf("=") !== -1) {
		pdfOptionsFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_HEADERFILE) === 0 && arg.indexOf("=") !== -1) {
		headerFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_FOOTERFILE) === 0 && arg.indexOf("=") !== -1) {
		footerFile = arg.substring(arg.indexOf("=") + 1);
	} else if (arg.indexOf(OPTION_CONREFFILE) === 0 && arg.indexOf("=") !== -1) {
		conrefFile = arg.substring(arg.indexOf("=") + 1);
	} else {
		/* don't display errors for the first two args (the node executable and .js file) */
		if (switchCounter > 2) {
			console.log("*** Ignoring unknown command-line switch: " + arg);
		}
	}
});

if (sourceDir && destDir) {
	console.log("\nProcessing source directory: " + sourceDir + "...\n");
	var loggerLevel = logger.WARNING;
	if (verbose) {
		loggerLevel = logger.INFO;
	}
	if (debug) {
		loggerLevel = logger.DEBUG;
	}
	var logger = new logger.Logger(loggerLevel);
	mdProcessor.generate({
		sourceDir: sourceDir,
		destDir: destDir,
		overwrite: overwrite,
		disableAttributes: disableAttributes,
		disableTOC: disableTOC,
		disablePDF: disablePDF,
		pdfOptionsFile: pdfOptionsFile,
		headerFile: headerFile,
		footerFile: footerFile,
		conrefFile: conrefFile
	}, logger);
} else {
	outputHelpPage();
}

function outputHelpPage() {
	console.log("\n\nUsage:\n\tmarked-it-cli " + ARG_SOURCEDIR + "=<sourceDirectory> " + ARG_DESTDIR + "=<destinationDirectory> [OPTIONS]");
	console.log("\nRequired Args:\n");
	console.log(ARG_SOURCEDIR);
	console.log("\tThe path of the directory containing source Markdown files");
	console.log(ARG_DESTDIR);
	console.log("\tThe path of the directory to write generated files to");
	console.log("\nOptions:\n");
	console.log(SWITCH_OVERWRITE);
	console.log("\tOverwrite output files that already exist");
	console.log(SWITCH_ATTRIBUTES);
	console.log("\tDisable processing of Kramdown-style attribute lists");
	console.log(SWITCH_PDF);
	console.log("\tDo not generate .pdf files");
	console.log(SWITCH_TOC);
	console.log("\tDo not generate Table of Contents files");
	console.log(SWITCH_VERBOSE);
	console.log("\tOutput verbose details");
	console.log(SWITCH_DEBUG);
	console.log("\tOutput even more verbose details");
	console.log(OPTION_HEADERFILE + "=<headerSourceFile>");
	console.log("\tPath to the file with content to be prepended to the generated .html");
	console.log(OPTION_FOOTERFILE + "=<footerSourceFile>");
	console.log("\tPath to the file with content to be appended to the generated .html");
	console.log(OPTION_PDFOPTIONSFILE + "=<pdfOptionsFile>");
	console.log("\tPath to the file with PDF generation options");
	console.log(OPTION_CONREFFILE + "=<conrefFile>");
	console.log("\tPath to the file containing DITA-style variable definitions");
	console.log("\n\nPDF Generation\n");	
	console.log("For PDF file generation to succeed, wkhtmltopdf must be installed and the path");
	console.log("to its binary must be in the OS' PATH environment variable. For wkhtmltopdf info");
	console.log("and available downloads see <http://wkhtmltopdf.org/>.  Note that on Windows the");
	console.log("wkhtmltopdf arch (32-/64-bit) should match that of the node.js being used.");
	console.log("\nIf " + OPTION_PDFOPTIONSFILE + " is not specified then all default options are used.");
	console.log("Custom options are specified in strict JSON format as the camel-cased equivalents");
	console.log("of the options described at <http://wkhtmltopdf.org/usage/wkhtmltopdf.txt>.");
	console.log("For an example see included file example/examplePDFoptions.");
	console.log("\n\nHomepage: <https://github.com/grant-g/marked-it-cli>\n");
}
